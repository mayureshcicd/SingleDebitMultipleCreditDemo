spring.datasource.url=jdbc:mysql://localhost:3306/transactions_db?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=Mvr#2023
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Ensure data.sql runs after Hibernate creates tables
spring.jpa.defer-datasource-initialization=true

# Optional: So you see the inserts in the logs
spring.sql.init.mode=always

# If you want MYSQL then add below dependency in your pom.xml
<!-- MySQL JDBC -->
<dependency>
<groupId>com.mysql</groupId>
<artifactId>mysql-connector-j</artifactId>
<scope>runtime</scope>
</dependency>



# HikariCP maximum connections in the pool (Increase based on expected load and available resources)
spring.datasource.hikari.maximum-pool-size=20

# Minimum number of idle connections (Half of maximum-pool-size for efficiency)
spring.datasource.hikari.minimum-idle=10

# How long idle connections are kept before being removed (10 minutes, reduces idle churn)
spring.datasource.hikari.idle-timeout=600000

# How long to wait for a connection before timing out (30 seconds)
spring.datasource.hikari.connection-timeout=30000

# Max lifetime of a connection (29 minutes to close connections proactively before DB timeout)
spring.datasource.hikari.max-lifetime=1740000

# Custom pool name for easier monitoring
spring.datasource.hikari.pool-name=StretchDBConnection

# Leak detection threshold (5 seconds, helps detect potential leaks quickly)
spring.datasource.hikari.leak-detection-threshold=5000

# Validation timeout for connection health checks (5 seconds for production reliability)
spring.datasource.hikari.validation-timeout=5000

# Health check query to validate idle connections
spring.datasource.hikari.connection-test-query=SELECT 1
